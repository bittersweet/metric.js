// Generated by CoffeeScript 1.4.0
(function() {
  var Metric;

  Metric = {
    setApiKey: function(api_key) {
      return this.api_key = api_key;
    },
    setUrl: function(url) {
      return this.url = url;
    },
    setCustomer: function(customer) {
      return this.customer = customer;
    },
    log: function(output) {
      if (console) {
        return console.log(output);
      }
    },
    track: function(metric, options) {
      var url;
      if (options == null) {
        options = {};
      }
      url = this.generateTrackingUrl(metric, options);
      return this.sendRequest(url, options.callback);
    },
    generateTimeString: function() {
      return (new Date).getTime().toString();
    },
    generateTrackingUrl: function(metric, options) {
      var amount, parameters, time, url;
      if (options == null) {
        options = {};
      }
      time = this.generateTimeString();
      url = this.url || "https://api.metric.io";
      amount = options.amount || 1;
      url = "" + url + "/v1/sites/" + this.api_key + "/track";
      parameters = {
        metric: metric,
        amount: amount,
        time: time,
        meta: options.meta,
        customer: this.customer || (this.customer = options.customer)
      };
      return this.buildUrl(url, parameters);
    },
    generateStatisticsUrl: function(metric, range, token) {
      var url;
      url = this.url || "https://api.metric.io";
      url = "" + url + "/v1/sites/" + this.api_key + "/statistics";
      return this.buildUrl(url, {
        metric: metric,
        range: range,
        token: token
      });
    },
    receive: function(metric, amount, token) {
      var url;
      url = this.generateStatisticsUrl(metric, amount, token);
      return this.sendRequest(url, callback);
    },
    sendRequest: function(url, callback) {
      var request;
      callback || (callback = this.log);
      request = new XMLHttpRequest();
      if (request.withCredentials !== void 0) {
        request.open("GET", url, true);
        request.onreadystatechange = function(e) {
          if (request.readyState === 4) {
            if (request.status === 200) {
              return callback(request.responseText);
            } else {
              return Metric.log("Bad HTTP status", request.status, request.statusText);
            }
          }
        };
        return request.send();
      }
    },
    serialize: function(object, prefix) {
      var k, key, str, value;
      str = [];
      for (key in object) {
        value = object[key];
        if (value) {
          k = prefix ? prefix + "[" + key + "]" : key;
          if (typeof value === "object") {
            str.push(this.serialize(value, k));
          } else {
            str.push(encodeURIComponent(k) + "=" + encodeURIComponent(value));
          }
        }
      }
      return str.join("&");
    },
    buildUrl: function(url, parameters) {
      var querystring;
      querystring = this.serialize(parameters);
      if (querystring.length > 0) {
        url = url + "?" + querystring;
      }
      return url;
    }
  };

  if (typeof window === 'undefined') {
    this.metric = Metric;
  } else {
    window.metric = Metric;
  }

}).call(this);
