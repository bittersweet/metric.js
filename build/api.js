// Generated by CoffeeScript 1.4.0
(function() {
  var Metric;

  Metric = {
    setApiKey: function(api_key) {
      return this.api_key = api_key;
    },
    setUrl: function(url) {
      return this.url = url;
    },
    log: function(output) {
      if (console) {
        return console.log(output);
      }
    },
    track: function(metric, amount, callback) {
      var url;
      url = this.generateTrackingUrl(metric, amount);
      return this.sendRequest(url, callback);
    },
    generateTimeString: function() {
      return (new Date).getTime().toString();
    },
    generateTrackingUrl: function(metric, amount) {
      var time, url;
      time = this.generateTimeString();
      url = this.url || "https://api.metric.io";
      amount || (amount = 1);
      return "" + url + "/v1/sites/" + this.api_key + "/track?metric=" + metric + "&amount=" + amount + "&time=" + time;
    },
    generateStatisticsUrl: function(metric, range, token) {
      var url;
      url = this.url || "https://api.metric.io";
      return "" + url + "/v1/sites/" + this.api_key + "/statistics?metric=" + metric + "&range=" + range + "&token=" + token;
    },
    receive: function(metric, amount, token) {
      var url;
      url = this.generateStatisticsUrl(metric, amount, token);
      return this.sendRequest(url, callback);
    },
    sendRequest: function(url, callback) {
      var request;
      callback || (callback = this.log);
      request = new XMLHttpRequest();
      if (request.withCredentials !== void 0) {
        request.open("GET", url, true);
        request.onreadystatechange = function(e) {
          if (request.readyState === 4) {
            if (request.status === 200) {
              return callback(request.responseText);
            } else {
              return Metric.log("Bad HTTP status", request.status, request.statusText);
            }
          }
        };
        return request.send();
      }
    }
  };

  if (typeof window === 'undefined') {
    this.metric = Metric;
  } else {
    window.metric = Metric;
  }

}).call(this);
